// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  orders    Order[]
  wallets   Wallet[]
}

model Wallet {
  id        String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  asset     String
  available Float  @default(0)
  locked    Float  @default(0)

  @@unique([userId, asset])
}

model Order {
  id             String       @id @default(uuid())
  userId         String
  side           SIDE
  pair           String
  price          Float        @default(0)
  quantity       Float
  filledQuantity Float        @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  type           ORDER_TYPE
  status         ORDER_STATUS
  buyTrades      Trade[]      @relation("BuyTrades")
  sellTrades     Trade[]      @relation("SellTrades")
  user           User         @relation(fields: [userId], references: [id])
}

model Trade {
  id         String   @id @default(uuid())
  bidId      String
  askId      String
  price      Float
  quantity   Float
  pair       String
  executedAt DateTime @default(now())
  marketId   String
  market     Market   @relation(fields: [marketId], references: [id])
  bid Order @relation("BuyTrades", fields: [bidId], references: [id])
  ask Order @relation("SellTrades", fields: [askId], references: [id])
}

model Market {
  id          String   @id @default(uuid())
  ticker      String
  baseAsset   String
  quoteAsset  String
  symbol    String
  logo   String
  price       Float
  volume24h   Float?
  marketCap   Float?
  change24h   Float?
  sparkline7d Json?
  trades      Trade[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SIDE {
  BUY
  SELL
}

enum ORDER_STATUS {
  OPEN
  PARTIALLY_FILLED
  FILLED
  CANCELLED
}

enum ORDER_TYPE {
  LIMIT
  MARKET
}
